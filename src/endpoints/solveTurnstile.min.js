async function solveTurnstileMin({ url, proxy, siteKey }) {
  return new Promise(async (resolve, reject) => {
    if (!url) return reject("Missing url parameter");
    if (!siteKey) throw new Error("Missing siteKey parameter");
    let isResolved = false;

    const context = await global.browser.createBrowserContext().catch(() => null);
    if (!context) return reject("Failed to create browser context");

    const page = await context.newPage();
    
    try {
      if (proxy?.username && proxy?.password) {
        await page.authenticate({
          username: proxy.username,
          password: proxy.password,
        });
      }
      await page.setRequestInterception(true);
      page.on("request", async (request) => {
        if (
          [url, url + "/"].includes(request.url()) &&
          request.resourceType() === "document"
        ) {
          const response = await request.respond({
            status: 200,
            contentType: "text/html",
            body: String(
              require("fs").readFileSync("./src/data/fakePage.html")
            ).replace(/<site-key>/g, siteKey),
          });
        } else {
          await request.continue();
        }
      });
      await page.goto(url, {
        waitUntil: "domcontentloaded",
      });

      await page.waitForSelector('[name="cf-response"]', {
        timeout: 60000,
      });

      const token = await page.evaluate(() => {
        try {
          return document.querySelector('[name="cf-response"]').value;
        } catch (e) {
          return null;
        }
      });
      
      isResolved = true;
      await page.close();

      if (!token || token.length < 10) throw new Error("Failed to get token");
      resolve({ token }); 
    } catch (e) {
      console.error("Error in getSource:", e.message);
      if (!isResolved) {
        await page.close();
        reject(e.message);
      }
    }
  });
}

module.exports = solveTurnstileMin;
